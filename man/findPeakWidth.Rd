% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenericDefinition.R, R/PeakList.R
\name{findPeakWidth}
\alias{findPeakWidth}
\alias{findPeakWidth,PeakList-method}
\title{generic method findPeakWidth}
\usage{
findPeakWidth(
  object,
  p = 3,
  n = 5,
  span = 100,
  widthExtLower = 1.5,
  widthExtUpper = 1.75,
  ...
)

\S4method{findPeakWidth}{PeakList}(
  object,
  p = 3,
  n = 199,
  span = 100,
  widthExtLower = 1.7,
  widthExtUpper = 2,
  ...
)
}
\arguments{
\item{object}{object of class PeakList}

\item{p}{numeric value for savitzky-golay filter on first derivate}

\item{n}{numeric value for savitzky-golay filter on first derivate}

\item{span}{numeric smoothing for determining local minima/maxima values}

\item{widthExtLower}{numeric factor to extend lower peak width}

\item{widthExtUpper}{numeric factor to extend upper peak width}

\item{...}{additional args}
}
\value{
object of class PeakList with updated peaks
}
\description{
method findPeakWidth
}
\details{
This method uses signal processing to determine lower and upper peak width
limits based on local max/min detection of the first derivate next to
peak center values. The initial code for local min/max detection is adapted
from the CRAN package 'alsace'.
}
\examples{
library(tofsimsData)
data(tofsimsData)
testPeakList<-PeakList(analysisName = analysisName(testSpectra),
instrument = instrument(testSpectra),
nz = nz(testSpectra),
calibration = calibration(testSpectra),
calibPoints = calibPoints(testSpectra),
mz = mz(testSpectra),
peakIDs = NULL,
peakMzs = NULL)
par(mfcol=c(1,2))
plot(testPeakList, mzRange=c(25,32), type = 'l')
testPeakList<-addPeaks(testPeakList, mzs=26:31, width=0.4)
testPeakList<-findPeakWidth(testPeakList, p = 3, n = 199, 
span = 100, widthExtLower = 2, widthExtUpper = 2)
plot(testPeakList, mzRange=c(25,32), type = 'l')
}
